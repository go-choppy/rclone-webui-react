{"version":3,"sources":["utils/RclonePropTypes.js","views/Base/RunningJobs/RunningJobs.js","actions/statusActions.js","views/Base/BackendStatusCard/BackendStatusCard.js","views/Base/Widgets/BandwidthWidget.js","views/Base/BandwidthStatusCard/BandwidthStatusCard.js","views/Home/Home.js"],"names":["prop_types__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","PropTypes","Features","isRequired","Hashes","Name","Precision","String","remoteName","remotePath","Path","Size","MimeType","ModTime","IsDir","rate","options","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","xAxes","display","JobCard","_ref","job","name","eta","percentage","speed","speedAvg","size","bytes","isNaN","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","value","className","formatBytes","secondsToStr","JobCardRow","_ref2","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","lg","length","substr","getCroppedName","GlobalStatus","_ref3","stats","checks","elapsedTime","deletes","errors","transfers","lastError","TransferringJobs","_ref4","transferring","undefined","map","item","idx","key","TransferringJobsRow","_ref5","grouped","groupByKey","group","console","log","array","forEach","val","keys","push","JobGroup","groupId","_ref6","_useState","useState","_useState2","Object","_home_runner_work_rclone_webui_react_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_5__","showCollapse","setShowCollapse","_useState3","_useState4","cancelButtonEnabled","setCancelButtonEnabled","onClick","reactstrap__WEBPACK_IMPORTED_MODULE_13__","sm","reactstrap__WEBPACK_IMPORTED_MODULE_14__","color","disabled","e","stopPropagation","indexOf","jobid","split","axiosInstance","post","urls","stopJob","_async","then","res","catch","err","error","reactstrap__WEBPACK_IMPORTED_MODULE_15__","isOpen","RunningJobs","props","context","_this","_home_runner_work_rclone_webui_react_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_runner_work_rclone_webui_react_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_runner_work_rclone_webui_react_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","toggleShowing","setState","prevState","isShowing","state","_this2","_this$props","jobs","isConnected","lineChartData","mode","react_chartjs_2__WEBPACK_IMPORTED_MODULE_18__","data","style","overflowY","React","Component","connect","ownProps","speedData","status","labels","data1","data2","dataLength","slice","Math","ceil","bytesToKB","toFixed","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","getStatus","_home_runner_work_rclone_webui_react_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_runner_work_rclone_webui_react_rclone_webui_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","dispatch","getState","_getState","wrap","_context","prev","next","checkStatus","type","FETCH_STATUS","REQUEST_SUCCESS","payload","REQUEST_ERROR","stop","_x","_x2","apply","arguments","enableCheckStatus","shouldEnable","_callee2","_context2","ENABLE_STATUS_CHECK","_x3","getBandwidth","_callee3","_context3","bwlimit","GET_BANDWIDTH","_x4","setBandwidth","newRate","_callee4","_context4","SET_BANDWIDTH","_x5","TaskModal","ReactDOM","createPortal","react__WEBPACK_IMPORTED_MODULE_5___default","_RunningJobs__WEBPACK_IMPORTED_MODULE_11__","document","getElementById","MODAL_ROOT_ELEMENT","BackendStatusCard","toggleCheckStatus","refreshInterval","setInterval","STATUS_REFRESH_TIMEOUT","clearInterval","_this$props2","ipAddress","localStorage","getItem","IP_ADDRESS_KEY","username","USER_NAME_KEY","reactstrap__WEBPACK_IMPORTED_MODULE_6__","StatusText","connectivityStatus","userName","defaultProps","isDisabled","BandwidthWidget","cssModule","header","icon","children","invert","attributes","objectWithoutProperties","progress","card","bgColor","classes","mapToCssModules","classNames","react_default","Card","assign","CardBody","Progress","BandwidthStatusCard","classCallCheck","possibleConstructorReturn","getPrototypeOf","_this$state","bandwidthText","hasError","toast","changeBandwidthInput","inputValue","target","validateInput","validateSizeSuffix","toggleShowChangeBandwidth","showChangeBandwidth","_this$state2","bandwidth","Row","Col","Widgets_BandwidthWidget","Button","CardHeader","Form","onSubmit","FormGroup","row","Label","for","Input","valid","invalid","id","onChange","FormFeedback","Home","data-test","Base_BandwidthStatusCard_BandwidthStatusCard"],"mappings":"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","file":"static/js/17.90849615.chunk.js","sourcesContent":["import * as PropTypes from \"prop-types\";\n\nexport const PROP_FS_INFO = PropTypes.oneOfType([\n    PropTypes.shape({\n        Features: PropTypes.object.isRequired,\n        Hashes: PropTypes.array.isRequired,\n        Name: PropTypes.string.isRequired,\n        Precision: PropTypes.number.isRequired,\n        String: PropTypes.string.isRequired\n    }),\n    PropTypes.object\n]);\n\nexport const PROP_CURRENT_PATH = PropTypes.shape({\n    remoteName: PropTypes.string.isRequired,\n    remotePath: PropTypes.string.isRequired\n});\n\nexport const PROP_CONTAINER_ID = PropTypes.string;\n\nexport const PROP_LOAD_IMAGES_BOOL = PropTypes.bool;\n\nexport const PROP_IN_VIEWPORT = PropTypes.bool;\n\nexport const PROP_ITEM = PropTypes.shape({\n\n    Path: PropTypes.string.isRequired,\n    Name: PropTypes.string.isRequired,\n    Size: PropTypes.number,\n    MimeType: PropTypes.string,\n    ModTime: PropTypes.string.isRequired,\n    IsDir: PropTypes.bool.isRequired\n\n});\n\nexport const PROP_BANDWIDTH = PropTypes.shape({\n    // bytesPerSecond: PropTypes.number.isRequired,\n    rate: PropTypes.string.isRequired\n\n});","import React, {useState} from 'react';\nimport {Button, Card, CardBody, CardHeader, Col, Collapse, Container, Progress, Row} from \"reactstrap\";\nimport {bytesToKB, formatBytes, groupByKey, secondsToStr} from \"../../../utils/Tools\";\nimport * as PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {Line} from \"react-chartjs-2\";\nimport {CustomTooltips} from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport urls from \"../../../utils/API/endpoint\";\n\nconst options = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    scales: {\n        yAxes: [{\n            ticks: {\n                beginAtZero: true\n            }\n        }],\n        xAxes: [{\n            ticks: {\n                display: false\n            }\n        }]\n    }\n};\nfunction JobCard({job}) {\n    const {name, eta, percentage, speed, speedAvg, size, bytes} = job;\n    if (name && !isNaN(speed)) {\n\n        return (<Card>\n            <CardHeader>Running Jobs</CardHeader>\n            <CardBody>\n                <p>{name}</p> {/*Name of the file*/}\n                <Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress> {/*percentage*/}\n                <p><strong>Speed: </strong>{formatBytes(speed)}PS</p> {/*speed*/}\n                <p><strong>Average Speed: </strong>{formatBytes(speedAvg)}PS</p> {/*speedAvg*/}\n                <p><strong>Total transferred: </strong>{formatBytes(bytes)}</p> {/*bytes: convert to mb*/}\n                <p><strong>Size: </strong>{formatBytes(size)}</p>\n                <p><strong>ETA: </strong>{secondsToStr(eta)}</p>\n            </CardBody>\n\n        </Card>);\n    }\n    return null;\n}\n\nfunction getCroppedName(name) {\n    const leftChars = 30;\n    const rightChars = 5;\n\n    if (name.length > leftChars) {\n        const croppedName = name.substr(0, leftChars) + \" ... \" + name.substr(-rightChars);\n        return croppedName;\n    }\n    return name;\n\n}\n\nfunction JobCardRow({job}) {\n    const {name, percentage, speed, size} = job;\n    return (\n        <React.Fragment>\n            <Row className=\"runningJobs\">\n                {(size && speed) ? (\n\n                    <Col lg={12} className=\"itemName\"> {getCroppedName(name)} {\" \"}\n                        ({formatBytes(size)}) - {formatBytes(speed)}PS </Col>\n                ) : (\n                    <Col lg={12}>Calculating</Col>)}\n\n            </Row>\n            <Row>\n                <Col lg={12}><Progress value={percentage} className={\"mb-2\"}>{percentage} %</Progress></Col>\n            </Row>\n\n        </React.Fragment>\n    );\n\n\n}\n\nfunction GlobalStatus({stats}) {\n    const {speed, bytes, checks, elapsedTime, deletes, errors, transfers, lastError} = stats;\n    return (\n        <Card>\n            <CardHeader><strong>Global Stats</strong></CardHeader>\n            <CardBody>\n                <table className=\"table\">\n                    <tbody>\n                    <tr>\n                        <td>Bytes Transferred:</td>\n                        <td>{formatBytes(bytes)}</td>\n                    </tr>\n                    <tr>\n                        <td>Average Speed:</td>\n                        <td>{formatBytes(speed)}PS</td>\n                    </tr>\n                    <tr>\n                        <td>Checks:</td>\n                        <td>{checks}</td>\n                    </tr>\n                    <tr>\n                        <td>Deletes:</td>\n                        <td>{deletes}</td>\n                    </tr>\n                    <tr>\n                        <td>Running since:</td>\n                        <td>{secondsToStr(elapsedTime)}</td>\n                    </tr>\n                    <tr className={errors > 0 ? \"table-danger\" : \"\"}>\n                        <td>Errors:</td>\n                        <td>{errors}</td>\n                    </tr>\n                    <tr>\n                        <td>Transfers:</td>\n                        <td>{transfers}</td>\n                    </tr>\n                    <tr>\n                        <td>Last Error:</td>\n                        <td>{lastError}</td>\n                    </tr>\n\n                    </tbody>\n                </table>\n\n            </CardBody>\n            {/*<CardFooter></CardFooter>*/}\n\n        </Card>);\n}\n\nfunction TransferringJobs({transferring}) {\n    if (transferring !== undefined) {\n        return transferring.map((item, idx) => {\n            return (<JobCard key={item.name} job={item}/>);\n        });\n    }\n    return null;\n}\n\nfunction TransferringJobsRow({transferring}) {\n    if (transferring !== undefined) {\n        const grouped = groupByKey(transferring, job => job.group);\n        console.log(grouped);\n\n        const array = [];\n\n        grouped.forEach((val, keys) => {\n            console.log(val, keys);\n            array.push (<JobGroup job={val} groupId={keys} key={keys}/>);\n        });\n        return array;\n\n        // return grouped.values().map((item, idx) => {\n        // \treturn (<JobCardRow key={item.name} job={item}/>);\n        // });\n    }\n    return null;\n}\n\nfunction JobGroup({job, groupId}) {\n    const [showCollapse, setShowCollapse] = useState(false);\n    const [cancelButtonEnabled, setCancelButtonEnabled] = useState(true);\n    console.log(job);\n\n    const stopJob = (e, groupId) => {\n        e.stopPropagation();\n        if(groupId && groupId.indexOf('/') !== -1) {\n            setCancelButtonEnabled(false);\n            const jobid = groupId.split('/')[1];\n            axiosInstance.post(urls.stopJob, {jobid, _async:true}).then(function (res) {\n                console.log(res);\n            }).catch(err => {\n                console.error(err);\n            })\n        }\n    };\n    // setCancelButtonEnabled((groupId && groupId !== \"undefined\"));\n    if(job) {\n        return (\n            <>\n                {groupId &&\n                <Card>\n\n                    <CardHeader onClick={() => setShowCollapse(!showCollapse)}>\n                        <Container>\n                            <Row>\n                                <Col sm={10}>\n                                    Transferring {job.length} file(s)\n                                </Col>\n                                <Col sm={2}>\n                                    <Button color={\"light\"} disabled={!cancelButtonEnabled}\n                                            onClick={(e) => stopJob(e, groupId)}\n                                            className={\"btn-outline-danger btn-pill\"}><i\n                                        className=\"fa fa-close fa-sm\"/></Button>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </CardHeader>\n                    <Collapse isOpen={showCollapse}>\n                        <CardBody>\n                            {\n                                job.map((item, idx) => {\n                                    return (<JobCardRow key={item.name} job={item}/>);\n                                })\n                            }\n                        </CardBody>\n                    </Collapse>\n                </Card>\n                }\n            </>\n        );\n    }\n    return null;\n}\n\n\nclass RunningJobs extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            isShowing: true\n        }\n    }\n\n    toggleShowing = () => {\n        this.setState((prevState) => {\n            return {\n                isShowing: !prevState.isShowing\n            }\n        })\n    };\n\n\n\n\n\n    render() {\n        const {jobs, isConnected, lineChartData} = this.props;\n        const {transferring} = jobs;\n        const {mode} = this.props;\n        if (mode === \"full-status\") {\n            if (isConnected) {\n                return (\n                    <Row>\n                        <Col sm={12} lg={4}>\n                            <GlobalStatus stats={jobs}/>\n                        </Col>\n\n                        <Col sm={12} lg={4}>\n                            <Card>\n                                <CardHeader>\n                                    Speed\n                                </CardHeader>\n                                <CardBody>\n                                    <div className=\"chart-wrapper\">\n                                        <Line data={lineChartData} options={options}/>\n                                    </div>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <Col sm={12} lg={4}>\n                            <TransferringJobs transferring={transferring}/>\n                        </Col>\n                    </Row>\n                );\n            } else {\n                return (<div>Not connected to smartcdp.</div>)\n            }\n\n        } else if (mode === \"card\") {\n            if (isConnected) {\n                return (\n                    <TransferringJobsRow transferring={transferring}/>\n                );\n            } else {\n                return (<div>Not connected to smartcdp.</div>);\n            }\n\n        } else if (mode === \"modal\") {\n            if (transferring && transferring.length > 0)\n                return (\n                    <Card className=\"progress-modal d-none d-sm-block\">\n                        <CardHeader onClick={() => this.toggleShowing()}>Progress\n                            <div className=\"card-header-actions\">\n                                <Button color=\"link\">\n                                    <i className=\"fa fa-close fa-lg\"/>\n                                </Button>\n                            </div>\n                        </CardHeader>\n                        <CardBody className={!this.state.isShowing ? \"d-none\" : \"progress-modal-body\"}  style={{overflowY: 'scroll'}}>\n                            <TransferringJobsRow transferring={transferring}/>\n\n                        </CardBody>\n                    </Card>\n                );\n            return null;\n        }\n    }\n}\n\nRunningJobs.propTypes = {\n    mode: PropTypes.string.isRequired,\n    isConnected: PropTypes.bool.isRequired,\n    jobs: PropTypes.object.isRequired,\n    error: PropTypes.object\n};\n\nconst mapStateToProps = (state, ownProps) => {\n\n    const speedData = state.status.speed;\n    let lineChartData = {};\n    if (speedData) {\n        let labels = [];\n        let data1 = [];\n        let data2 = [];\n\n        const dataLength = speedData.length;\n        //\n        const limitedData = speedData.slice(dataLength - 50, dataLength - 1);\n        // console.log(limitedData.length);\n        limitedData.forEach((item, idx) => {\n            labels.push(Math.ceil(item.elapsedTime));\n            data1.push(bytesToKB(item.speed).toFixed(2));\n            data2.push(bytesToKB(item.speedAvg).toFixed(2));\n        });\n\n        // console.log(data1, data2);\n        lineChartData = {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Speed (kbps)',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#fff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data1,\n                },\n                {\n                    label: 'Average Speed (kbps)',\n                    fill: true,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(187,69,14,0.4)',\n                    borderColor: 'rgb(192,76,58)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgb(187,69,14)',\n                    pointBackgroundColor: '#ff7459',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 10,\n                    data: data2,\n                }\n            ],\n        };\n    }\n\n\n    return {\n        jobs: state.status.jobs,\n        isConnected: state.status.isConnected,\n        error: state.status.error,\n        lineChartData\n    }\n};\n\nexport default connect(mapStateToProps, {})(RunningJobs);\n","import axiosInstance from \"../utils/API/API\";\nimport {ENABLE_STATUS_CHECK, FETCH_STATUS, GET_BANDWIDTH, REQUEST_ERROR, REQUEST_SUCCESS, SET_BANDWIDTH} from \"./types\";\nimport urls from \"../utils/API/endpoint\";\n\n/**\n * Gets the current status of the rclone backend.\n * Depends upon state.status.checkStatus to execute the http request, if set to false, does not send any http request\n * @returns {Function}\n */\nexport const getStatus = () => async (dispatch, getState) => {\n    // console.log(\"get Status\");\n    const {status} = getState();\n    if (status.checkStatus) {\n        axiosInstance.post(urls.stats).then(res => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_SUCCESS,\n            payload: res.data\n        }), error => dispatch({\n            type: FETCH_STATUS,\n            status: REQUEST_ERROR,\n            payload: error\n        }))\n    }\n};\n\n/**\n * Enables or disables the check status functionality to improve network performance.\n * Modifies state.status.checkStatus according to the passed value.\n * @param shouldEnable {boolean} It specifies whether to check for status updates from the backend or skip checking it\n * @returns {Function}\n */\nexport const enableCheckStatus = (shouldEnable) => async dispatch => {\n    dispatch({\n        type: ENABLE_STATUS_CHECK,\n        payload: shouldEnable\n    })\n};\n\n\n/**\n * Gets the current bandwidth set in the rclone backend.\n * @returns {Function}\n */\nexport const getBandwidth = () => async dispatch => {\n    // console.log(\"get Status\");\n    axiosInstance.post(urls.bwlimit).then(res => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n/**\n * Changes the current bandwidth limit of the rclone backend.\n * @param newRate {string} Human readable format of size eg: 1M|2M|1.2G specifying 1MB, 2MB, 1.2GB respectively.\n * @returns {Function}\n */\nexport const setBandwidth = (newRate) => async dispatch => {\n    // console.log(\"get Status\");\n    axiosInstance.post(urls.bwlimit, {rate: newRate}).then(res => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: SET_BANDWIDTH,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n\n","import React from \"react\";\nimport {Button, Card, CardBody, CardHeader} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport RunningJobs from \"../RunningJobs\";\nimport {connect} from \"react-redux\";\nimport {enableCheckStatus, getStatus} from \"../../../actions/statusActions\";\nimport {IP_ADDRESS_KEY, MODAL_ROOT_ELEMENT, STATUS_REFRESH_TIMEOUT, USER_NAME_KEY} from \"../../../utils/Constants\";\n\n/**\n * Functional component Modal which is placed in the element with id \"modal-root\" in index.html using React.createPortal\n * @returns {{children, implementation, containerInfo, $$typeof, key}}\n * @constructor\n */\nfunction TaskModal() {\n    return ReactDOM.createPortal((\n        <RunningJobs mode={\"modal\"}/>\n\n    ), document.getElementById(MODAL_ROOT_ELEMENT));\n}\n\n/**\n * Component for display and monitoring of backend rclone status. Auto refresh status in redux store every 5 seconds.\n */\nclass BackendStatusCard extends React.Component {\n\n\n    componentWillMount() {\n\n        // Check if the connection to the backend is active\n        this.props.getStatus();\n        this.refreshInterval = setInterval(() => this.props.getStatus(), STATUS_REFRESH_TIMEOUT);\n    }\n\n\n    componentWillUnmount() {\n        // Clear the interval before component is unmounted\n        clearInterval(this.refreshInterval);\n    }\n\n    /**\n     * Enable or disable checking of status request by http request to the backend.\n     */\n    toggleCheckStatus = () => {\n        const {checkStatus, enableCheckStatus} = this.props;\n        console.log(checkStatus, enableCheckStatus);\n        enableCheckStatus(!checkStatus);\n    };\n\n    /**\n     * Renders the component with mode.\n     * Card: Enables the card mode.\n     * Default: Table mode (Grid)\n     * @returns {*}\n     */\n    render() {\n        const {isConnected, mode, checkStatus} = this.props;\n\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n        const username = localStorage.getItem(USER_NAME_KEY);\n\n\n        if (mode === \"card\")\n            return (\n\n                <Card\n                    className={\"text-center \" + (isConnected ? \"card-accent-info\" : \"card-accent-warning\")}>\n                    <CardHeader>\n                        rclone status\n                    </CardHeader>\n                    <CardBody>\n                        <StatusText checkStatus={checkStatus} connectivityStatus={isConnected} ipAddress={ipAddress}\n                                    userName={username}/>\n\n                    </CardBody>\n                </Card>\n            );\n        else /*Default*/\n            return (\n                <React.Fragment>\n                    <Button type=\"primary\" onClick={this.toggleCheckStatus}\n                            className={isConnected ? \"bg-info  d-none d-lg-block\" : \"bg-warning d-none d-lg-block\"}> {checkStatus ? isConnected ? \"CONNECTED\" : \"DISCONNECTED\" : \"DISABLED\"}</Button>\n                    {/*Show current tasks in the side modal*/}\n                    <TaskModal/>\n                </React.Fragment>\n            );\n    }\n}\n\n/**\n *\n * @param connectivityStatus    {boolean}   Current connectivity status to the backend.\n * @param checkStatus           {boolean}   Specify whether to check the status or skip.\n * @param ipAddress             {string}    IP Address of the backend\n * @param userName              {string}    User name of the currently logged in user.\n * @returns {*}\n * @constructor\n */\nfunction StatusText({connectivityStatus, checkStatus, ipAddress, userName}) {\n    if (!checkStatus) {\n        return <p>Not monitoring connectivity status. Tap the icon in navbar to start.</p>\n    }\n    if (connectivityStatus) {\n        return (\n            <p>The rclone backend is connected and working as expected.<br/>Current IP address is {ipAddress}\n                <br/><strong> Username: </strong>{userName}</p>\n        );\n    } else {\n        return (\n            <p>Cannot connect to rclone backend. There is a problem with connecting to {ipAddress}.</p>\n\n        )\n    }\n}\n\nconst propTypes = {\n    /**\n     * Used to specify mode of render : card/ grid.\n     */\n    mode: PropTypes.string.isRequired,\n    /**\n     * Boolean to represent internet connectivity\n     */\n    isConnected: PropTypes.bool.isRequired,\n    /**\n     * Boolean to represent whether checking for status at interval is allowed\n     */\n    checkStatus: PropTypes.bool.isRequired,\n\n\n    /**\n     * Function to enable or disable status check\n     */\n    enableCheckStatus: PropTypes.func.isRequired,\n    /**\n     * Get the current status\n     */\n    getStatus: PropTypes.func.isRequired\n};\n\nconst defaultProps = {\n    mode: \"card\",\n};\n\n\nBackendStatusCard.propTypes = propTypes;\nBackendStatusCard.defaultProps = defaultProps;\n\nconst mapStateToProps = state => ({\n    isConnected: state.status.isConnected,\n    isDisabled: state.status.isDisabled,\n    checkStatus: state.status.checkStatus\n});\n\nexport default connect(mapStateToProps, {getStatus, enableCheckStatus})(BackendStatusCard);\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Card, CardBody, Progress} from 'reactstrap';\nimport classNames from 'classnames';\nimport {mapToCssModules} from 'reactstrap/lib/utils';\n\nconst propTypes = {\n    header: PropTypes.string,\n    icon: PropTypes.string,\n    color: PropTypes.string,\n    value: PropTypes.string,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n    invert: PropTypes.bool,\n};\n\nconst defaultProps = {\n    header: '87.500',\n    icon: 'icon-people',\n    color: 'info',\n    value: '25',\n    children: 'Visitors',\n    invert: false,\n};\n\nclass BandwidthWidget extends Component {\n    render() {\n        const {className, cssModule, header, icon, color, value, children, invert, ...attributes} = this.props;\n\n        // demo purposes only\n        const progress = {style: '', color: color, value: value};\n        const card = {style: '', bgColor: '', icon: icon};\n\n        if (invert) {\n            progress.style = 'progress-white';\n            progress.color = '';\n            card.style = 'text-white';\n            card.bgColor = 'bg-' + color;\n        }\n\n        const classes = mapToCssModules(classNames(className, card.style, card.bgColor), cssModule);\n        progress.style = classNames('progress-xs mt-3 mb-0', progress.style);\n\n        return (\n            <Card className={classes} {...attributes}>\n                <CardBody>\n                    <div className=\"h1 text-muted text-right mb-2\">\n                        <i className={card.icon}></i>\n                    </div>\n                    <div className=\"h4 mb-0\">{header}</div>\n                    <small className=\"text-muted text-uppercase font-weight-bold\">{children}</small>\n                    <Progress className={progress.style} color={progress.color} value={progress.value}/>\n                </CardBody>\n            </Card>\n        );\n    }\n}\n\nBandwidthWidget.propTypes = propTypes;\nBandwidthWidget.defaultProps = defaultProps;\n\nexport default BandwidthWidget;","import React from \"react\";\nimport BandwidthWidget from \"../Widgets/BandwidthWidget\";\nimport {validateSizeSuffix} from \"../../../utils/Tools\";\nimport {toast} from \"react-toastify\";\nimport {Button, Card, CardBody, CardHeader, Col, Form, FormFeedback, FormGroup, Input, Label, Row} from \"reactstrap\";\nimport {connect} from \"react-redux\";\nimport {getBandwidth, setBandwidth} from \"../../../actions/statusActions\";\nimport * as PropTypes from \"prop-types\";\nimport {PROP_BANDWIDTH} from \"../../../utils/RclonePropTypes\";\n\n\nclass BandwidthStatusCard extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            bandwidthText: \"\",\n            hasError: false,\n            showChangeBandwidth: false\n        };\n    }\n\n    /**\n     * Get the current bandwidth from the backend\n     */\n    getBandwidth = () => {\n        const {getBandwidth} = this.props;\n        getBandwidth();\n    };\n\n    /**\n     * Set the new bandwidth specified in state.bandwidthText\n     * Check if text is valid, before sending.\n     */\n    setBandwidth = () => {\n        const {bandwidthText, hasError} = this.state;\n        if (!hasError) {\n            const {setBandwidth} = this.props;\n            if (bandwidthText)\n                setBandwidth(bandwidthText);\n            else {\n                setBandwidth(\"0M\");\n            }\n        } else {\n            toast.error(\"Error in form\");\n        }\n    };\n\n    /**\n     * Change the state.bandwidthText\n     * Validate input before setting, if the input text is invalid, set the hasError in the state.\n     * @param e\n     */\n    changeBandwidthInput = (e) => {\n        const inputValue = e.target.value;\n        const validateInput = validateSizeSuffix(inputValue);\n        this.setState({\n            bandwidthText: inputValue,\n            hasError: (inputValue !== \"\" ? !validateInput : false)\n        })\n    };\n\n    /**\n     * Upon first shallow, get the current bandwidth\n     */\n    componentDidMount() {\n        this.getBandwidth();\n    }\n\n    /**\n     * Show or hide the right side modal with the form to change the current bandwidth.\n     */\n    toggleShowChangeBandwidth = () => {\n        this.setState((prevState) => ({\n\n            showChangeBandwidth: !prevState.showChangeBandwidth\n        }))\n    };\n\n    render() {\n        const {bandwidthText, hasError, showChangeBandwidth} = this.state;\n        const {bandwidth} = this.props;\n\n        return (\n\n            <Row>\n                <Col lg={showChangeBandwidth ? 6 : 12} sm={12}>\n                    <BandwidthWidget icon=\"icon-speedometer\" color=\"danger\"\n                                     header={(bandwidth.rate !== \"off\") ? bandwidth.rate : \"Unlimited\"} lg={6} sm={12}>\n                        Current bandwidth <Button color=\"link\"\n                                                  onClick={this.toggleShowChangeBandwidth}>{!showChangeBandwidth ? \"Change\" : \"Close\"}\n                        <i\n                            className={\"fa fa-lg fa-angle-\" + (!showChangeBandwidth ? \"right\" : \"left\")}/></Button>\n                    </BandwidthWidget>\n                </Col>\n                <Col lg={6} sm={12} className={showChangeBandwidth ? \"\" : \"d-none\"}>\n                    <Card>\n                        <CardHeader>Change bandwidth</CardHeader>\n                        <CardBody>\n                            <Form onSubmit={this.setBandwidth}>\n                                <FormGroup row>\n                                    <Label for=\"bandwidthValue\" sm={5}>New Bandwidth</Label>\n                                    <Col sm={7}>\n                                        <Input type=\"text\" value={bandwidthText}\n                                               valid={!hasError} invalid={hasError}\n                                               id=\"bandwidthValue\" onChange={this.changeBandwidthInput}>\n                                        </Input>\n                                        <FormFeedback valid>Keep empty to reset.</FormFeedback>\n                                        <FormFeedback>The bandwidth should be of the form 1M|2M|1G|1K|1.1K\n                                            etc</FormFeedback>\n\n                                    </Col>\n                                </FormGroup>\n                                <Button className=\"float-right\" color=\"success\" type=\"submit\">Set</Button>\n\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </Col>\n\n            </Row>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    /**\n     * Connectivity status with backend\n     */\n    isConnected: state.status.isConnected,\n    /**\n     * Map with {bytesPerSecond, rate}\n     */\n    bandwidth: state.status.bandwidth\n});\n\nBandwidthStatusCard.propTypes = {\n    isConnected: PropTypes.bool.isRequired,\n    /**\n     * Determines currently set bandwidth\n     */\n    bandwidth: PROP_BANDWIDTH,\n    /**\n     * Redux function to get the current bandwidth.\n     */\n    getBandwidth: PropTypes.func.isRequired,\n    /**\n     * Redux function to set the new bandwidth in rclone backend.\n     */\n    setBandwidth: PropTypes.func.isRequired,\n\n};\n\nexport default connect(mapStateToProps, {getBandwidth, setBandwidth})(BandwidthStatusCard)\n","import React from 'react';\nimport {Col, Row} from \"reactstrap\";\nimport BackendStatusCard from \"../Base/BackendStatusCard/BackendStatusCard\";\nimport RunningJobs from \"../Base/RunningJobs\";\nimport BandwidthStatusCard from \"../Base/BandwidthStatusCard/BandwidthStatusCard\";\nimport {connect} from \"react-redux\";\nimport * as PropTypes from 'prop-types';\nimport {IP_ADDRESS_KEY} from \"../../utils/Constants\";\n\nclass Home extends React.Component {\n\n\n    render() {\n        const {checkStatus} = this.props;\n        const ipAddress = localStorage.getItem(IP_ADDRESS_KEY);\n        return (\n            <div data-test=\"homeComponent\">\n                <h2>Welcome to SmartCDP dashboard. </h2>\n                <p>Begin by creating a new remote config from the left sidebar.</p>\n\n\n                <Row>\n                    <Col lg={4} sm={12}>\n                        <BackendStatusCard ipAddress={ipAddress} mode={\"card\"}/>\n                    </Col>\n                    <Col lg={4} sm={12}>\n                        <BandwidthStatusCard/>\n                    </Col>\n                </Row>\n                <h2>Jobs</h2>\n                {checkStatus ? <RunningJobs mode={\"full-status\"}/> : <p>Not Monitoring</p>}\n\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    checkStatus: state.status.checkStatus\n});\n\nHome.propTypes = {\n    checkStatus: PropTypes.bool.isRequired\n};\n\nexport default connect(mapStateToProps, {})(Home);\n"],"sourceRoot":""}