{"version":3,"sources":["actions/configActions.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["__webpack_require__","d","__webpack_exports__","getProviders","getConfigDump","_utils_API_API__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","_utils_API_endpoint__WEBPACK_IMPORTED_MODULE_2__","dispatch","axiosInstance","post","urls","then","res","type","GET_PROVIDERS","payload","data","providers","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","error","REQUEST_ERROR","NewDriveAuthModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","closeModal","isVisible","react_default","a","createElement","ErrorBoundary","Modal","isOpen","ModalHeader","data-test","ModalBody","ModalFooter","Button","color","onClick","React","Component","defaultProps","getSuggestions","config","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","Description","slice","getSuggestionValue","suggestion","Prefix","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","_ref","setState","suggestions","onSuggestionsClearRequested","state","_this$props","onChange","currentConfig","findFromConfig","inputProps","placeholder","undefined","dist_default","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","idx","Hide","Advanced","labelValue","concat","Help","requiredValue","Required","className","hasExamples","isEmpty","Examples","examplesMap","inputType","IsPassword","Type","key","FormGroup","row","Label","for","Name","sm","Col","Input","name","valid","invalid","id","required","FormFeedback","CustomInput","_ref2","label","_ref2$isValid","isValid","NewDrive","context","e","target","defineProperty","handleInputChange","inputName","optionTypes","formValues","objectSpread","validateResult","validateSizeSuffix","validateDuration","validateInt","prevState","formErrors","changeDriveType","event","_ref3","newValue","val","availableOptions","forEach","item","DefaultStr","openSetupDrive","preventDefault","colSetup","setupDriveDiv","scrollIntoView","behavior","editAdvancedOptions","advancedOptions","clearForm","driveName","changeName","driveNameIsEditable","console","log","driveNameIsValid","getConfigForRemote","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","colRconfig","formValuesValid","authModalIsVisible","configCheckInterval","handleSubmit","toggleAuthModal","startAuthentication","checkConfigStatus","clearInterval","history","push","toast","_context","t0","autoClose","_this$state","flag","_i","_Object$entries","entries","_ref6","_ref5","slicedToArray","setInterval","NEW_DRIVE_CONFIG_REFRESH_TIMEOUT","validateForm","defaults","finalParameterValues","defaultValueObj","find","ele","array","parameters","match","params","createConfig","info","updateConfig","_context2","stopAuthentication","warn","_this2","_this3","_this$state3","Form","onSubmit","Card","CardHeader","style","marginBottom","Collapse","CardBody","NewDrive_ProviderAutoSuggest","href","CardFooter","ref","el","Base_NewDriveAuthModal_NewDriveAuthModal","isEdit","connect"],"mappings":"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","file":"static/js/20.82a463ec.chunk.js","sourcesContent":["import axiosInstance from \"../utils/API/API\";\nimport {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport urls from \"../utils/API/endpoint\";\n\n\n/**\n * Gets all Providers from the rclone UI Backend\n * @returns {Function}\n */\nexport const getProviders = () => dispatch => {\n    axiosInstance.post(urls.getProviders).then(res => dispatch({\n        type: GET_PROVIDERS,\n        payload: res.data.providers\n    }))\n};\n/**\n * Gets dump of configured remotes from the rclone backend\n * @returns {Function}\n */\nexport const getConfigDump = () => dispatch => {\n    axiosInstance.post(urls.getConfigDump).then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res.data\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as  PropTypes from \"prop-types\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\nclass NewDriveAuthModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n\n    render() {\n        const {isVisible} = this.props;\n        return (\n            <div>\n                <ErrorBoundary>\n                    <Modal isOpen={isVisible} toggle={this.toggle}>\n                        <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\n                        <ModalBody data-test=\"modalBody\">\n                            A page will open for you with the authentication for your drive. This modal will\n                            automatically\n                            dismiss upon successful creation\n                        </ModalBody>\n                        <ModalFooter data-test=\"modalFooter\">\n                            <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                            {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\n                        </ModalFooter>\n                    </Modal>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nNewDriveAuthModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\nNewDriveAuthModal.defaultProps = {\n    isVisible: true,\n};\n\n\nexport default NewDriveAuthModal;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;","import React from 'react';\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    Col,\n    Collapse,\n    Form,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {findFromConfig, isEmpty, validateDuration, validateInt, validateSizeSuffix} from \"../../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from 'prop-types';\nimport {getProviders} from \"../../../actions/configActions\";\nimport {connect} from \"react-redux\";\nimport {NEW_DRIVE_CONFIG_REFRESH_TIMEOUT} from \"../../../utils/Constants\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\nimport urls from \"../../../utils/API/endpoint\";\n\n/**\n * Returns a component with set of input, error for the drivePrefix.\n * The input type changes based on config.Options.Type parameter. see code for details.\n * @param drivePrefix   {string}    Name of the remote in the config.\n * @param loadAdvanced  {boolean}   Load or skip the advanced options from the config options.\n * @param changeHandler {function}  This function is called once the value changes\n * @param currentValues {$ObjMap}   This map denotes current updated values for the parameters.\n * @param isValidMap    {$ObjMap}   This map denotes whether the parameter value is valid. This should be set by the changeHandler.\n * @param errorsMap     {$ObjMap}   This map contains string errors of each parameters.\n * @param config        {$ObjMap}   This map contains the actual parameter list and Options for all the providers.\n * @returns             {Array|*}   JSX array with parameter formGroups.\n * @constructor\n */\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"string\";\n                        // examplesMap = attr.Examples.map((ex1, id1) => {\n                        //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        // })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\n\n/**\n * Functional Component. Custom input for selecting a new name for the current config.\n * @param key           {string}    Contains the key to be used as the react key parameter in an array\n * @param id            {string}    Id to be used as a HTML id.\n * @param label         {string}    Label of the form input\n * @param changeHandler {function}  Called when the input changes.\n * @param type          {string}    Type of the input (ReactStrap supported). Eg: select, text etc.\n * @param value         {string}    The current value of the input.\n * @param name          {string}    The html name for the input.\n * @param placeholder   {string}    Placeholder text for input.\n * @param isValid       {boolean}   If set, displays positive message, else displays error message.\n * @returns             {*}         Functional component.\n * @constructor\n */\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n/**\n * Component to create a new remote configuration.\n */\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n            driveNameIsEditable: true,\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n        };\n        this.configCheckInterval = null;\n        // console.log(\"Params\", this.props.match.params);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    /**\n     *\n     * @param e {$ObjMap} Event of the toggle event.\n     */\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(urls.getConfigForRemote, {name: driveName});\n            // console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/dashboard');\n\n            }\n        } catch (e) {\n            // console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Handle inoit change and set appropriate errors.\n     * @param e\n     */\n    handleInputChange = (e) => {\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n    };\n\n    /**\n     * Update the driveType and then load the equivalent input parameters for that drive.\n     * @param event     {$ObjMap} Event to be handled.\n     * @param newValue  {string} new Value of the drive type.\n     */\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        isValid[Name] = !(Required && (!DefaultStr || DefaultStr === \"\"));\n\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n    };\n\n    /**\n     * Open second step of setting up the drive and scroll into view.\n     */\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    /**\n     *  toggle the step 3: advanced options\n     */\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    /**\n     * Validate the form and set the appropriate errors in the state.\n     * @returns {boolean}\n     */\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!key || !value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    /**\n     *  Show or hide the auth modal.\n     */\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    /**\n     *  Show or hide the authentication modal and start timer for checking if the new config is created.\n     */\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, NEW_DRIVE_CONFIG_REFRESH_TIMEOUT);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    /**\n     *  Called when the config is successfully created. Clears the timout and hides the authentication modal.\n     */\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n    /**\n     * Called when form action submit is to be handled.\n     * Validate form and submit request.\n     * */\n    async handleSubmit(e) {\n        e.preventDefault();\n        // console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        if (key === \"token\") {\n                            finalParameterValues[key] = value;\n                            continue;\n                        }\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            // console.log(key, ele.Name, key === ele.Name);\n                            return (key === ele.Name);\n                        });\n                        if (defaultValueObj) {\n\n                            const {DefaultStr} = defaultValueObj;\n                            if (value !== DefaultStr) {\n                                // console.log(`${value} !== ${DefaultStr}`);\n                                finalParameterValues[key] = value;\n                            }\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    // console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        const {drivePrefix} = this.props.match.params;\n\n                        if (!drivePrefix) {\n\n                            await axiosInstance.post(urls.createConfig, data);\n                            toast.info(\"Config created\");\n                        } else {\n                            await axiosInstance.post(urls.updateConfig, data);\n                            toast.info(\"Config Updated\");\n                        }\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            if (!this.state.colSetup) {\n                this.openSetupDrive();\n            }\n\n            if (this.state.advancedOptions && !this.state.colAdvanced) {\n                this.openAdvancedSettings();\n            }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Clears the entire form.\n     * Clearing the driveName and drivePrefix automatically clears the inputs as well.\n     * */\n    clearForm = e => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n    /**\n     * Change the name of the drive. Check if it already exists, if not, allow to be changes, else set error.\n     * */\n    changeName = e => {\n        const {driveNameIsEditable} = this.state;\n        console.log(\"changeName\");\n        if (driveNameIsEditable) {\n            const value = e.target.value;\n\n            this.setState({driveName: value}, () => {\n\n                if (value === undefined || value === \"\") {\n                    this.setState({driveNameIsValid: false});\n                } else {\n\n                    axiosInstance.post(urls.getConfigForRemote, {name: value}).then((response) => {\n                        let errors = this.state.formErrors;\n                        let isValid = isEmpty(response.data);\n                        if (isValid) {\n                            errors[\"driveName\"] = \"\";\n                        } else {\n                            errors[\"driveName\"] = \"Duplicate\";\n\n                        }\n                        this.setState({formErrors: errors, driveNameIsValid: isValid});\n                    });\n                }\n\n            });\n        } else {\n            this.setState((prevState) => ({formErrors: {...prevState.formErrors, \"driveName\": \"Cannot edit name\"}}))\n        }\n    };\n\n    /**\n     * Open the advanced settings card and scroll into view.\n     * @param e\n     */\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n\n    /**\n     * Check if the provider list is empty else request new providers list.\n     * */\n\n    componentDidMount() {\n        const {drivePrefix} = this.props.match.params;\n\n\n\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n\n        if (drivePrefix) {\n            //Edit Mode\n            this.setState({driveName: drivePrefix, driveNameIsValid: true, driveNameIsEditable: false});\n            axiosInstance.post(urls.getConfigForRemote, {name: drivePrefix}).then(\n                (res) => {\n                    console.log(res);\n                    this.changeDriveType(undefined, {newValue: res.data.type});\n\n                    this.setState((prevState) => ({\n                        formValues: {...prevState.formValues, ...res.data}\n                    }))\n\n                }\n            )\n        }\n    }\n\n    /**\n     * Clear the intervals.\n     * */\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    render() {\n        const {colRconfig, colSetup, colAdvanced, drivePrefix, advancedOptions, driveName, driveNameIsValid} = this.state;\n        const {providers} = this.props;\n        // console.log(\"config\", config);\n        return (\n            <div data-test=\"newDriveComponent\">\n                <ErrorBoundary>\n                    <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                        parameters as is.</p>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Card>\n                            <CardHeader>\n                                <h5>\n                                    <Button color=\"link\" name=\"colRconfig\" onClick={this.toggle}\n                                            style={{marginBottom: '1rem'}}><strong>Step 1:</strong> Remote\n                                        Config</Button>\n                                </h5>\n\n                            </CardHeader>\n                            <Collapse isOpen={colRconfig}>\n\n                                <CardBody>\n                                    <CustomInput label=\"Name of this drive (For your reference)\"\n                                                 changeHandler={this.changeName} value={driveName}\n                                                 placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                                 isValid={driveNameIsValid}/>\n\n                                    <FormGroup row>\n                                        <Label for=\"driveType\" sm={5}>Select</Label>\n                                        <Col sm={7}>\n                                            <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                                 onChange={this.changeDriveType}/>\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Col sm={3}>\n                                            <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                            <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                        </Col>\n                                    </FormGroup>\n                                </CardBody>\n\n                                <CardFooter>\n                                    <div className=\"clearfix\">\n                                        <Button color=\"success\" className=\"float-right\" onClick={this.openSetupDrive}><i\n                                            className=\"fa fa-check fa-lg \"/></Button>\n                                    </div>\n                                </CardFooter>\n\n                            </Collapse>\n                        </Card>\n                        <Card>\n                            {/*div for Scrolling to here*/}\n                            <div ref={(el) => this.setupDriveDiv = el}/>\n                            <CardHeader>\n                                <h5>\n                                    <Button color=\"link\" name=\"colSetup\" onClick={this.toggle}\n                                            style={{marginBottom: '1rem'}}><strong>Step 2:</strong> Setup Drive</Button>\n                                </h5>\n\n                            </CardHeader>\n                            <Collapse isOpen={colSetup}>\n\n                                <CardBody>\n                                    <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                     changeHandler={this.handleInputChange}\n                                                     errorsMap={this.state.formErrors}\n                                                     isValidMap={this.state.isValid}\n                                                     currentValues={this.state.formValues} config={providers}/>\n                                </CardBody>\n                                <CardFooter>\n                                    <div className=\"clearfix\">\n                                        <div className=\"float-right\">\n                                            <Input type=\"checkbox\" value={advancedOptions}\n                                                   onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                            <Button color=\"success\" onClick={this.openAdvancedSettings}><i\n                                                className=\"fa fa-check fa-lg \"/></Button>\n\n                                        </div>\n                                    </div>\n                                </CardFooter>\n\n                            </Collapse>\n                        </Card>\n                        <Card>\n                            <CardHeader>\n                                <h5>\n                                    <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                            style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                        (optional)</Button>\n\n                                </h5>\n\n                            </CardHeader>\n                            <Collapse isOpen={colAdvanced}>\n\n                                <CardBody>\n                                    <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                     changeHandler={this.handleInputChange}\n                                                     errorsMap={this.state.formErrors}\n                                                     isValidMap={this.state.isValid}\n                                                     currentValues={this.state.formValues} config={providers}/>\n                                </CardBody>\n\n                            </Collapse>\n                        </Card>\n                        <div className=\"clearfix\" ref={(el) => {\n                            this.configEndDiv = el\n                        }}>\n                            <div className=\"float-right mb-3\">\n                                <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                                <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                            </div>\n                        </div>\n                    </Form>\n                    <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n                </ErrorBoundary>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    /**\n     * The list of all providers.\n     */\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired,\n    isEdit: PropTypes.bool.isRequired,\n    driveName: PropTypes.string\n};\n\nNewDrive.defaultProps = {\n    isEdit: false,\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"],"sourceRoot":""}